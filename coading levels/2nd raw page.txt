const fs = require('fs');
const express = require('express');
const morgan = require('morgan');

const app = express();

// 1st middle-ware
app.use(morgan('dev'));
app.use(express.json());

const tours =JSON.parse( 
fs.readFileSync(`${__dirname}/dev-data/data/tours-simple.json`)
);

 // 2nd Rout handelers 
   
    // function for getting all tours
const getAllTours = (req,res)=>{
    res.status(200).json({
    status:'success',
    data:{
    tours
    }
    });
    
    }; 
 // function for getting any one tours

const getTour = (req,res)=>{        // we can make optional parapeter /:id/:x/:y? here y is optional parameter
    const id = req.params.id * 1;              //  multplying paaram with 1 convert id(in form of string) to in number
const tour =tours.find(el=>el.id===id) // find method use in js to find reference type element from array

if(id > tours.length) { 
   return res.status(404).json({
       status:'fail',
       message:'Invalid ID'
   })
}

  console.log(req.params) // this line is use to see givern id bass
   
  res.status(200).json({
       status:'success',
       data:{
       tour
       }

   })
}
// function for creating tours

const creatTour =  (req,res)=>{
    const newId = tours[tours.length-1].id + 1;
    const newTour = Object.assign({id:newId},req.body);
    tours.push(newTour);
    fs.writeFile(`${__dirname}/dev-data/data/tours-simple.json`,JSON.stringify(tours),err=>{
        res.status(201).json({
            status:'success',
            data: { 
              tour:newTour
            }
         
        });
    })
    }
    // function for updating tours

const updateTour = (req,res)=>{
    if(req.params.id*1 > tours.length ){
        return res.status(404).json({
         status:'fail',
         message:'invalid ID'

        });
    }

    res.status(200).json({
        status: 'success',
        data: {
            tours:'<updated tour here...>'
        }
    })
}
// function for deleting tours

const deleteTour = (req,res)=>{
    if(req.params.id*1 > tours.length ){
        return res.status(404).json({
         status:'fail',
         message:'invalid ID'

        });
    }
    res.status(204).json({
        status:'success',
        data:null
        
    })
  
}
const getAllUsers=(req,res)=>{
    res.status(500).json({
      status:'error',
      message:'This route is not yed defined'  
    });
}

const creatUser=(req,res)=>{
    res.status(500).json({
      status:'error',
      message:'This route is not yed defined'  
    });
}
const getUser=(req,res)=>{
    res.status(500).json({
      status:'error',
      message:'This route is not yed defined'  
    });
}
const updateUser=(req,res)=>{
    res.status(500).json({
      status:'error',
      message:'This route is not yed defined'  
    });
}
const deleteUser=(req,res)=>{
    res.status(500).json({
      status:'error',
      message:'This route is not yed defined'  
    });
}
//  3rd all rout

// app.get('/api/v1/tours',getAllTours );
// app.get('/api/v1/tours/:id', getTour);
// app.post('/api/v1/tours',creatTour);
// app.patch('/api/v1/tours/:id',updateTour );
// app.delete('/api/v1/tours/:id',deleteTour );

          // Another way to handel route
          app
          .route('/api/v1/tours')
          .get(getAllTours)
          .post(creatTour);
          app
          .route('/api/v1/tours/:id')
          .get(getTour).patch(updateTour)
          .delete(deleteTour);

          app
          .route('/api/v1/users')
          .get(getAllUsers)
          .post(creatUser );

          app
          .route('/api/v1/users/:id')
          .get(getUser)
          .patch(updateUser)
          .delete(deleteUser);

  // 4th Server

const port = 3000;
app.listen(port,()=>{
console.log(`App is running on port ${port}..`);

})
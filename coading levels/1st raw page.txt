const fs = require('fs');
const express = require('express');
const app = express();

app.use(express.json());

const tours =JSON.parse( fs.readFileSync(`${__dirname}/dev-data/data/tours-simple.json`)
);
   // reading data using url (get request examlpe)

app.get('/api/v1/tours', (req,res)=>{
res.status(200).json({
status:'success',
data:{
tours
}
});

});

// Let now set rout handler for post request to add json object

app.post('/api/v1/tours', (req,res)=>{
const newId = tours[tours.length-1].id + 1;
const newTour = Object.assign({id:newId},req.body);
tours.push(newTour);
fs.writeFile(`${__dirname}/dev-data/data/tours-simple.json`,JSON.stringify(tours),err=>{
    res.status(201).json({
        status:'success',
        data: { 
          tour:newTour
        }
     
    });
})
});

// getting only one tour 
app.get('/api/v1/tours/:id', (req,res)=>{        // we can make optional parapeter /:id/:x/:y? here y is optional parameter
     const id = req.params.id * 1;              //  multplying paaram with 1 convert id(in form of string) to in number
const tour =tours.find(el=>el.id===id) // find method use in js to find reference type element from array

if(id > tours.length) { 
    return res.status(404).json({
        status:'fail',
        message:'Invalid ID'
    })
}

   console.log(req.params) // this line is use to see givern id bass
    
   res.status(200).json({
        status:'success',
        data:{
        tour
        }

    })
})
      // patch request
app.patch('/api/v1/tours/:id', (req,res)=>{
    if(req.params.id*1 > tours.length ){
        return res.status(404).json({
         status:'fail',
         message:'invalid ID'

        });
    }

    res.status(200).json({
        status: 'success',
        data: {
            tours:'<updated tour here...>'
        }
    })
})

app.delete('/api/v1/tours/:id', (req,res)=>{
    if(req.params.id*1 > tours.length ){
        return res.status(404).json({
         status:'fail',
         message:'invalid ID'

        });
    }
    res.status(204).json({
        status:'success',
        data:null59
        
    })
  
})

const port = 3000;
app.listen(port,()=>{
console.log(`App is running on port ${port}..`);

})
